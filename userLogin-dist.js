export class User{constructor(e){this.container=document.getElementById(e),this.init(),this.userIdArr=[]}init(){const e=this.getUserIdArr();if(e){const t=this.getUserDataFromStorage(e[0].userName);this.renderUserData(t)}else this.greeting()}greeting(){Swal.fire({title:"Hello! This is a Task Manager",text:"Here you can add your daily tasks, mark \tthem, delete, etc..  But before starting you need to write your name",showCancelButton:!1,confirmButtonText:"Ok"}).then((e=>{e.isConfirmed&&this.addUser()}))}addUser(){let e;const t=/^\d+$/;Swal.fire({title:"All right, now type your name here",input:"text",inputPlaceholder:"Type your name here",showCancelButton:!1,confirmButtonText:"Ok",inputValidator:e=>e?t.test(e)?"It's good to use only numbers, but in this world we also use letters":void 0:"Your name cannot be empty, please, write your name"}).then((t=>{if(t.isConfirmed){e=t.value,this.userId=e.trim();const r=this.titleUser(e);this.container.prepend(r),this.saveUserDataToStorage({userName:e})}}))}titleUser(e){const t=document.createElement("h1");return t.innerText=`Hello ${e}`,t.style.marginBottom="20px",t}switchUser=()=>{const e=Swal.mixin({customClass:{confirmButton:"btn btn-success",denyButton:"btn btn-danger"},buttonsStyling:!0});e.fire({icon:"question",title:"Do you want to save changes?",showCancelButton:!0,showDenyButton:!0,denyButtonText:"Don't safe",confirmButtonText:"Save"}).then((t=>{t.isConfirmed?e.fire({icon:"warning",title:"Do you want to save all users?",text:`Choose if you want to save only "${this.userId} profile" or to safe all users`,showCancelButton:!0,showDenyButton:!0,confirmButtonText:"Save all users",denyButtonText:"Save only this profile"}):t.isDenied&&Swal.fire({icon:"error",title:"Do you want to delete all users?",text:"You can delete only this user and save other profiles",showCancelButton:!0,showDenyButton:!0,confirmButtonText:"Delete all users",denyButtonText:"Delete only this profile"}).then((e=>{e.isConfirmed&&this.clearAllDataUsers()}))}))};clearAllDataUsers(){localStorage.clear(),Swal.fire({icon:"success",title:"Deleted"}).then((e=>{location.reload()}))}saveUserDataToStorage(e){const t=`user${this.userId}`,r=`tasks${this.userId}`;localStorage.setItem(t,JSON.stringify(e)),this.userIdArr.push({userName:t,userKeyArray:r}),localStorage.setItem("idArr",JSON.stringify(this.userIdArr))}getUserIdArr(){return JSON.parse(localStorage.getItem("idArr"))}updateUserArrayToStorage(e){const t=`tasks${this.userId}`;console.log(this.userId),localStorage.setItem(t,JSON.stringify(e))}getUserArrayFromLocalStorage(){const e=this.getUserIdArr();let t;return e&&(t=e[0].userKeyArray),JSON.parse(localStorage.getItem(t))||[]}getUserDataFromStorage(e){const t=localStorage.getItem(e);return t?JSON.parse(t):null}renderUserData(e){const{userName:t}=e,r=this.titleUser(t);this.container.prepend(r)}}