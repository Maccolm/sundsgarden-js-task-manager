export class TaskInteractions{constructor(t,s,e,i,n){this.allTasksContainer=t,this.completeTasksContainer=s,this.tasksArray=e,this.user=i,this.cssObj={itemCss:"item",item:".item",active:"active",bgColorActive:"bg-color-active",btnUndone:"btn-undone",btnDelete:"btn-delete",btnComplete:"btn-complete",btnStyle:"btn-style",btnContainer:"btn-container",greenColor:"green-color",redColor:"red-color",animate:"animate",delete:"deleteAnimation",...n&&{}},this.start()}allListClick(t,s,e){const i=document.getElementById(t),n=i.classList.contains(this.cssObj.active);s.forEach((t=>{t.classList.remove(this.cssObj.active),t.classList.contains(this.cssObj.bgColorActive)&&setTimeout((()=>{t.classList.remove(this.cssObj.bgColorActive),t.nextElementSibling.style.opacity=0}),250)})),n||(i.classList.add(this.cssObj.active),i.classList.add(this.cssObj.bgColorActive),e.style.opacity=1)}createButton(t,s){const e=document.createElement("button");switch(e.classList.add(this.cssObj.btnStyle),t){case"btn-delete":e.classList.add(this.cssObj.btnDelete),e.innerText="Delete";break;case"status":this.tasksArray.find((t=>t.id==s)).complete?(e.classList.add(this.cssObj.btnUndone),e.innerText="Mark Undone"):(e.classList.add(this.cssObj.btnComplete),e.innerText="Mark done")}return e}addAllListListener(){const t=this.allTasksContainer.querySelectorAll(this.cssObj.item);t.forEach((s=>{const e=s.getAttribute("id");s.style.transition="0.3s ease-out 0s";const i=document.createElement("div");i.className=this.cssObj.btnContainer;const n=this.createButton("status",e),a=this.createButton("btn-delete");n.onclick=this.handleButtonClick.bind(this,e,s,n),a.onclick=this.deleteItem.bind(this,e,s),i.append(n),i.append(a),s.parentElement.append(i),s.onclick=this.allListClick.bind(this,e,t,i)}))}handleButtonClick(t,s,e){let i=this.tasksArray.find((s=>s.id==t)).complete;const n=s.querySelector(".status-span");if(s.classList.add(this.cssObj.animate),setTimeout((()=>{s.classList.remove(this.cssObj.animate)}),550),!0===i){this.tasksArray.find((s=>s.id==t)).complete=!1,n.innerText="not completed",n.classList.remove(this.cssObj.greenColor),n.classList.add(this.cssObj.redColor),e.classList.remove(this.cssObj.btnUndone),e.classList.add(this.cssObj.btnComplete),e.innerText="Mark done",setTimeout((()=>{s.classList.remove(this.cssObj.active),setTimeout((()=>{s.classList.remove(this.cssObj.bgColorActive),s.nextElementSibling.style.opacity=0}),400)}),300);document.getElementById(t+"Clone").remove()}else{n.innerText="completed",n.classList.remove(this.cssObj.redColor),n.classList.add(this.cssObj.greenColor),this.tasksArray.find((s=>s.id==t)).complete=!0,e.classList.remove(this.cssObj.btnComplete),e.classList.add(this.cssObj.btnUndone),e.innerText="Mark undone",setTimeout((()=>{s.classList.remove(this.cssObj.active),setTimeout((()=>{s.classList.remove(this.cssObj.bgColorActive),s.nextElementSibling.style.opacity=0}),400)}),300);const i=s.cloneNode(!0);i.className=this.cssObj.itemCss,i.setAttribute("id",t+"Clone"),this.completeTasksContainer.prepend(i)}}deleteItem(t,s){const e=s.parentElement,i=document.getElementById(t+"Clone"),n=this.tasksArray.findIndex((s=>s.id==t));this.tasksArray.splice(n,1),this.user.updateUserArrayToStorage(this.tasksArray),e.classList.add(this.cssObj.delete),setTimeout((()=>{e.remove(),i&&i.remove()}),800)}start(){this.addAllListListener()}}